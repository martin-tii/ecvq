[{"state":{"code":"sequenceDiagram\n    Title Mutual Authentication\n    participant NodeU\n    participant NodeV\n    rect rgb(191, 223, 255)\n    NodeU ->> NodeV: U,V,NU,H[U,V,NU,Kuv]\n    end\n    NodeV -> NodeV: Verifiy Hash\n    rect rgb(191, 223, 255)\n    NodeV ->> NodeU: V,U,NV,H[V,U,NV,Kvu]\n    end\n    NodeU -> NodeU: Verifiy Hash\n","mermaid":"{\n  \"theme\": \"default\"\n}","autoSync":false,"updateDiagram":false,"pan":{"x":306.3658536585366,"y":93.4959349593496},"zoom":1.0000000382879293,"editorMode":"code","panZoom":true},"time":1672840202431,"type":"manual","id":"6d4712f0-34f1-485f-a0c3-54456e15dc14","name":"delightful-diamond"},{"state":{"code":"sequenceDiagram\n    Title Pair Wise Key Establishment \n    participant NodeU\n    participant NodeV\n    rect rgb(191, 223, 255)\n    NodeU ->> NodeV: V,AuthU, Hash(AuthU,V)\n    end\n    NodeV -> NodeV: Verifiy Hash\n    NodeV -> NodeV: Check Validity of Certificate\n    note right of NodeV: e = H(certU)\n    note right of NodeV: Qu = e*certU+QCA\n    note right of NodeV: Kuv = dv*Qu\n    rect rgb(191, 223, 255)\n    NodeV ->> NodeU: U,AuthV, Hash(AuthV,U)\n    end\n    NodeU -> NodeU: Verifiy Hash\n    NodeU -> NodeU: Check Validity of Certificate\n    note left of NodeU: e = H(certV)\n    note left of NodeU: QV = e*certV+QCA\n    note left of NodeU: Kvu = du*Qv","mermaid":"{\n  \"theme\": \"default\"\n}","autoSync":true,"updateDiagram":false,"pan":{"x":261.7368912810582,"y":213.1710500350461},"zoom":0.7756331562995911,"editorMode":"code","panZoom":true},"time":1672839304343,"type":"manual","id":"cb35530d-4524-4002-a24d-935a80b98005","name":"obnoxious-eventide"},{"state":{"code":"sequenceDiagram\n    Title Certificate Generation\n    participant NodeU\n    participant CA\n\n    CA -> CA: Validate U\n    CA -> CA: Verify Hash\n    Note right of CA: Pick random number rCA [1,...,n-1]\n    Note right of CA: certu = Ru + rCA*G\n    Note right of CA: e = Hash(certu)\n    Note right of CA: r = e*rCA + dCA (mod n)\n    rect rgb(191, 223, 255)\n    CA->>NodeU: AuthU=E[dCA(certu,s,TS,LT,Ru,U)], Hash(AuthU)\n    end\n    NodeU -> NodeU: Verify Hash\n    Note left of NodeU: du = e*ru + s (mod n)\n    Note left of NodeU: Qu = du*G","mermaid":"{\n  \"theme\": \"default\"\n}","autoSync":true,"updateDiagram":false,"pan":{"x":352.2949935064973,"y":383.62767023377194},"zoom":0.7513148784637451,"editorMode":"code","panZoom":true},"time":1672838189192,"type":"manual","id":"65edeafb-02ec-48d7-b9f1-a1356c28dcd8","name":"best-article"},{"state":{"code":"sequenceDiagram\n    Title Certificate Public Key Extraction \n    participant NodeU\n    participant CA\n\n    NodeU -> NodeU: Verify Hash\n    Note left of NodeU: du = e*ru + s (mod n)\n    Note left of NodeU: Qu = du*G\n","mermaid":"{\n  \"theme\": \"default\"\n}","autoSync":true,"updateDiagram":false,"pan":{"x":240.2033036848793,"y":189.10546378653117},"zoom":1,"editorMode":"code","panZoom":true},"time":1672837356823,"type":"manual","id":"d71ef9af-9ad9-4794-8603-354281ad91db","name":"microscopic-sundown"},{"state":{"code":"sequenceDiagram\n    Title Certificate Public Key Extraction \n    participant NodeU\n    participant CA\n\n    NodeU -> NodeU: Verify Hash\n    Note left of NodeU: du = e*ru + s (mod n)\n    Note left of NodeU: Qu = du*G\n","mermaid":"{\n  \"theme\": \"default\"\n}","autoSync":true,"updateDiagram":false,"pan":{"x":240.2033036848793,"y":189.10546378653117},"zoom":1,"editorMode":"code","panZoom":true},"time":1672837339333,"type":"manual","id":"a1355ed3-8eaa-4bc1-a6eb-02e520b17eee","name":"hot-sandwich"},{"state":{"code":"sequenceDiagram\n    Title Certificate Generation\n    participant NodeU\n    participant CA\n\n    CA -> CA: Validate U\n    CA -> CA: Verify Hash\n    Note right of CA: Pick random number rCA [1,...,n-1]\n    Note right of CA: certu = Ru + rCA*G\n    Note right of CA: e = Hash(certu)\n    Note right of CA: r = e*rCA + dCA (mod n)\n    rect rgb(191, 223, 255)\n    CA->>NodeU: r, certu\n    end\n    NodeU -> NodeU: Verify Hash\n    Note left of NodeU: du = e*ru + s (mod n)\n    Note left of NodeU: Qu = du*G","mermaid":"{\n  \"theme\": \"default\"\n}","autoSync":true,"updateDiagram":false,"pan":{"x":352.2949935064973,"y":383.62767023377194},"zoom":0.7513148784637451,"editorMode":"code","panZoom":true},"time":1672836852015,"type":"manual","id":"25955e34-8071-4423-bbff-900a1938643e","name":"bitter-dusk"},{"state":{"code":"sequenceDiagram\n    Title Certificate Request\n    participant NodeU\n    participant CA\n\n    Note left of NodeU: Pick Random number: ru \n    Note left of NodeU: Calculate: Ru = ru*G\n    rect rgb(191, 223, 255)\n    NodeU->>CA: Ru, U, Hash[Ru,U]\n    end","mermaid":"{\n  \"theme\": \"default\"\n}","autoSync":true,"updateDiagram":false,"pan":{"x":352.2949935064973,"y":383.62767023377194},"zoom":0.7513148784637451,"editorMode":"code","panZoom":true},"time":1672829537002,"type":"manual","id":"18a7695e-a852-4707-9803-a4caf1e0c0e2","name":"prickly-furniture"}]
